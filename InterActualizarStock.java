package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import modelo.Producto;

/**
 *
 * @author Héctor Sifuentes
 */
public class InterActualizarStock extends javax.swing.JInternalFrame {
    //variables

    int IdProducto = 0;
    int Cantidad = 0;

    public InterActualizarStock() {
        initComponents();
        setTitle("ACTUALIZAR STOCK DE PRODUCTOS.");
        setSize(new Dimension(400, 300));

        this.CargarComboProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_cantidadNueva = new javax.swing.JTextField();
        txt_cantidadActual = new javax.swing.JTextField();
        jComboBox_Producto = new javax.swing.JComboBox<>();
        jButton_Actualizar = new javax.swing.JButton();
        jLabel_walpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ACTUALIZAR STOCK DE PRODUCTOS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 370, 30));

        jLabel2.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 0));
        jLabel2.setText("Stock actual:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel3.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 0));
        jLabel3.setText("Stock nuevo:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        jLabel4.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 0));
        jLabel4.setText("Producto:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        txt_cantidadNueva.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 15)); // NOI18N
        getContentPane().add(txt_cantidadNueva, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 140, 240, -1));

        txt_cantidadActual.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 15)); // NOI18N
        txt_cantidadActual.setEnabled(false);
        getContentPane().add(txt_cantidadActual, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 100, 240, -1));

        jComboBox_Producto.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 15)); // NOI18N
        jComboBox_Producto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONE PRODUCTO", "Item 2", "Item 3", "Item 4" }));
        jComboBox_Producto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ProductoActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_Producto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 54, -1, 30));

        jButton_Actualizar.setBackground(new java.awt.Color(0, 102, 51));
        jButton_Actualizar.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 18)); // NOI18N
        jButton_Actualizar.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Actualizar.setText("ACTUALIZAR");
        jButton_Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ActualizarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_Actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(129, 190, 240, 30));

        jLabel_walpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondoStock.png"))); // NOI18N
        getContentPane().add(jLabel_walpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 425, 283));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_ProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ProductoActionPerformed
        this.MostrarStock();
    }//GEN-LAST:event_jComboBox_ProductoActionPerformed

    private void jButton_ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ActualizarActionPerformed
        //VALIDANDO SELECCION DEL PRODUCTO
        if (!jComboBox_Producto.getSelectedItem().equals("--SELECCIONE PRODUCTO")) {
            //VALIDANDO CAMPO VACIO
            if (!txt_cantidadNueva.getText().isEmpty()) {
                //VALIDANDO QUE EL USUARIO NO INGRESE CARACTERES NO NUMERICOS
                boolean validacion = Validar(txt_cantidadNueva.getText().trim());
                if (validacion == true) {
                    //VALIDANDO QUE LA CANTIDAD SEA MAYOR A 0
                    if (Integer.parseInt(txt_cantidadNueva.getText()) > 0) {

                        Producto producto = new Producto();
                        Ctrl_Producto controladorProducto = new Ctrl_Producto();
                        int stockActual = Integer.parseInt(txt_cantidadActual.getText().trim()); //CONVERTIR A ENTERO EL STOCK ACTUAL
                        int stockNuevo = Integer.parseInt(txt_cantidadNueva.getText().trim());  //CONVERTIR A ENTERO EL STOCK NUEVO

                        stockNuevo = stockActual + stockNuevo; //SUMAMOS STOCK ACTUAL CON EL STOCK NUEVO
                        producto.setCantidad(stockNuevo); //AGREGAMOS EL VALOR ALMACENADO EN STOCK NUEVO A CANTIDAD

                        if (controladorProducto.actualizarStock(producto, IdProducto)) {
                            JOptionPane.showMessageDialog(null, "STOCK ACTUALIZADO");
                            //DESPUES DE ACTUALIZAR, LAS CAJAS DE TEXTO Y EL JCOMBOBOX SE DEVUELVEN A SU ESTADOS INICIAL                            
                            jComboBox_Producto.setSelectedItem("--SELECCIONE PRODUCTO");
                            txt_cantidadActual.setText("");
                            txt_cantidadNueva.setText("");
                            this.CargarComboProductos(); //CARGAMOS EL METODO DE COMBO PRODUCTOS
                        } else {
                            JOptionPane.showMessageDialog(null, "¡ERROR AL ACTUALIZAR STOCK!");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "¡LA CANTIDAD DEBE SER MAYOR A 0!");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "¡INGRESE UN VALOR NUMÉRICO EN LA CANTIDAD!");
                }

            } else {
                JOptionPane.showMessageDialog(null, "¡INGRESE LA NUEVA CANTIDAD PARA SUMAR EL STOCK DEL PRODUCTO!");
            }

        } else {
            JOptionPane.showMessageDialog(null, "¡SELECCIONE UN PRODUCTO!");
        }

    }//GEN-LAST:event_jButton_ActualizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Actualizar;
    private javax.swing.JComboBox<String> jComboBox_Producto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel_walpaper;
    private javax.swing.JTextField txt_cantidadActual;
    private javax.swing.JTextField txt_cantidadNueva;
    // End of variables declaration//GEN-END:variables

    //metodo para cargar comboProductos
    private void CargarComboProductos() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_Producto";
        Statement st;
        try {
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_Producto.removeAllItems(); //ELIMINAR LOS INTEMS PREDETERMINADOS DEL COMBOBOX
            jComboBox_Producto.addItem("--SELECCIONE PRODUCTO"); //AGREGA EL ITEM PRINCIPAL
            while (rs.next()) {
                jComboBox_Producto.addItem(rs.getString("nombre")); //DESPLIEGA LOS NOMBRES DE LOS PRODUCTOS DE LA BD EN LOS ITEMS.
            }
        } catch (SQLException e) {
            System.out.println("Error al cargar los productos: " + e);
        }
    }

    //metodo para mostrar stock del producto seleccionado     
    public void MostrarStock() {
        try {
            Connection cn = Conexion.conectar();
            String sql = "select * from tb_Producto where nombre = '" + this.jComboBox_Producto.getSelectedItem() + "'";
            Statement st;
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                IdProducto = rs.getInt("Id_Producto");             
                Cantidad = rs.getInt("cantidad");
                txt_cantidadActual.setText(String.valueOf(Cantidad)); //MUESTRA EL STOCK EN LA CAJA DE TEXTO DE CANTIDAD_ACTUAL
            } else {
                txt_cantidadActual.setText(""); //LIMPIA LA CASILLA PARA QUE NO SE MUESTRE EL ULTIMO ELEMENTO SELECCIONADO
            }

        } catch (SQLException e) {
            System.out.println("Error al obtener stock del producto: " + e);
        }
    }

    //VALIDANCION DE CARACTERES NO NUMERICOS
    private boolean Validar(String valor) {

        int numero;

        try {
            numero = Integer.parseInt(valor); //ALMACENAMOS "n" y se convierte a entero. Si es una letra, se pasa a False
            return true;
        } catch (NumberFormatException e) {
            return false;
        }

    }

}
