package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import java.awt.Dimension;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.Producto;

/**
 *
 * @author Héctor Sifuentes
 */
public class InterGestionarProducto extends javax.swing.JInternalFrame {

    private int Id_Producto;
    int obtenerId_CategoriaCombo = 0;
    int obtenerId_ProveedorCombo = 0;
            
    public InterGestionarProducto() {
        initComponents();
        this.setSize(new Dimension(900, 500));
        this.setTitle("GESTIONAR PRODUCTOS.");
        //carga tabla    
        this.CargarTablaProductos();
        this.CargarComboCategorias();
        this.CargarComboMarca();

        //insertar imagen en el JLabel_walpaper
        ImageIcon wallpaper = new ImageIcon("src/img/fondoPantalla.jpg");
        Icon icono = new ImageIcon(wallpaper.getImage().getScaledInstance(900, 500, WIDTH));
        jLabel_walpaper.setIcon(icono);
        this.repaint(); //se guardan los cambios para la imagen        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Producto = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txt_Descripcion = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txt_precio = new javax.swing.JTextField();
        txt_nombre = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        jComboBox_Marca = new javax.swing.JComboBox<>();
        jComboBox_iva = new javax.swing.JComboBox<>();
        jComboBox_categoria = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jButton_Actualizar = new javax.swing.JButton();
        jButton_Eliminar = new javax.swing.JButton();
        jLabel_walpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ADMINISTRAR PRODUCTOS");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_Producto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable_Producto);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 710, 270));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 710, 270));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Nombre:");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, -1));

        txt_Descripcion.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jPanel3.add(txt_Descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 10, 170, -1));

        jLabel3.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Marca:");
        jLabel3.setToolTipText("");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 70, -1));

        jLabel4.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Cantidad:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 10, 90, -1));

        jLabel5.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Precio:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 40, 60, -1));

        jLabel6.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Descripción:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, 100, -1));

        jLabel7.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("IVA:");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, 40, -1));

        jLabel8.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Categorías:");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 90, -1));

        txt_precio.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        jPanel3.add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 40, 170, -1));

        txt_nombre.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        txt_nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_nombreActionPerformed(evt);
            }
        });
        jPanel3.add(txt_nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 10, 170, -1));

        txt_cantidad.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 14)); // NOI18N
        txt_cantidad.setEnabled(false);
        jPanel3.add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 10, 170, -1));

        jComboBox_Marca.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 15)); // NOI18N
        jComboBox_Marca.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONE MARCA", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(jComboBox_Marca, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 40, 220, -1));

        jComboBox_iva.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 15)); // NOI18N
        jComboBox_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONE IVA", "SIN IVA", "8%", "16%" }));
        jPanel3.add(jComboBox_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 40, 190, -1));

        jComboBox_categoria.setFont(new java.awt.Font("MS Reference Sans Serif", 1, 15)); // NOI18N
        jComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--SELECCIONE CATEGORÍA", "Item 2", "Item 3", "Item 4" }));
        jComboBox_categoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_categoriaActionPerformed(evt);
            }
        });
        jPanel3.add(jComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, -1, -1));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 870, 120));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton_Actualizar.setBackground(new java.awt.Color(0, 204, 102));
        jButton_Actualizar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton_Actualizar.setText("ACTUALIZAR");
        jButton_Actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ActualizarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_Actualizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 120, 30));

        jButton_Eliminar.setBackground(new java.awt.Color(255, 51, 51));
        jButton_Eliminar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton_Eliminar.setText("ELIMINAR");
        jButton_Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_EliminarActionPerformed(evt);
            }
        });
        jPanel2.add(jButton_Eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, 30));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 50, 140, 270));
        getContentPane().add(jLabel_walpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, -30, 900, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_ActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ActualizarActionPerformed
        
        Producto producto = new Producto();
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        String marca = "";
        String iva = "";
        String categoria = "";
        marca = jComboBox_Marca.getSelectedItem().toString().trim();
        iva = jComboBox_iva.getSelectedItem().toString().trim();
        categoria = jComboBox_categoria.getSelectedItem().toString().trim();

        //validar campos
        if (txt_nombre.getText().isEmpty() || txt_cantidad.getText().isEmpty() || txt_precio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "COMPLETA TODOS LOS CAMPOS");        
        } else {
                if(marca.equals("--SELECCIONE MARCA")) {
                   JOptionPane.showMessageDialog(null, "SELECCIONE MARCA.");  }
                    else { if (iva.equals("--SELECCIONE IVA")) {
                      JOptionPane.showMessageDialog(null, "SELECCIONE IVA."); }
                       else { if (categoria.equalsIgnoreCase("--SELECCIONE CATEGORÍA")) {
                        JOptionPane.showMessageDialog(null, "SELECCIONE CATEGORIA."); }                   
                           else {
                               try {                            
                              producto.setNombre(txt_nombre.getText().trim());
                              
                             //Id_Proveedor--> metodo que obtiene la id del proveedor 
                             this.IdProveedor();
                             producto.setId_Proveedor(obtenerId_ProveedorCombo);
                                                          
                              producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));
                              String precioTxt = "";
                              double precio = 0.0;
                              
                              precioTxt = txt_precio.getText().trim();
                              boolean aux = false;
                              
                              /* Si el usuario ingresa , como punto decimal,
                                    lo transformamos a punto (.)
                              */
                              for (int i = 0; i < precioTxt.length(); i++) {
                                  if(precioTxt.charAt(i) == ','){
                                       String precioNuevo = precioTxt.replace(",", ".");
                                       precio = Double.parseDouble(precioNuevo);
                                       aux = true;
                                  }
                              }                          
                             /*evaluar la condicion*/ 
                             if(aux == true){
                                 producto.setPrecio(precio);
                             } else{
                                 precio = Double.parseDouble(precioTxt);
                                 producto.setPrecio(precio);
                             }
                             
                            producto.setDescripcion(txt_Descripcion.getText().trim());
                            //PORCENTAJE DE IVA
                            if(iva.equalsIgnoreCase("SIN IVA")){
                                producto.setPorcentajeIva(0);
                            }
                            else if(iva.equalsIgnoreCase("8%")){
                                producto.setPorcentajeIva(8); 
                            }
                            else if(iva.equalsIgnoreCase("16%")){
                                 producto.setPorcentajeIva(16);
                            }
                            
                            //Id_Categoria--> metodo que obtiene la id de la categoria
                            this.IdCategoria();
                            producto.setId_Categoria(obtenerId_CategoriaCombo);
                            producto.setEstado(1);
                            
                            if(controlProducto.actualizar(producto, Id_Producto)){
                         JOptionPane.showMessageDialog(null, "PRODUCTO ACTUALIZADO.");                        
                          this.CargarComboMarca();
                          this.jComboBox_Marca.setSelectedItem("--SELECCIONE MARCA");                          
                          this.CargarComboCategorias();
                          this.CargarTablaProductos();
                          this.jComboBox_iva.setSelectedItem("--SELECCIONE IVA");
                          this.Limpiar();
                            }else{
                         JOptionPane.showMessageDialog(null, "ERROR AL ACTUALIZAR PRODUCTO.");       
                            }                                                       
                          }
                          
                          catch(Exception e){
                              System.out.println("Error en: "+e);
                          }
                       }  
                    }  
                }
          }  
    }//GEN-LAST:event_jButton_ActualizarActionPerformed

    private void jButton_EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_EliminarActionPerformed
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        if (Id_Producto == 0) {
            JOptionPane.showMessageDialog(null, "¡SELECCIONE UN PRODUCTO!");
        } else {
            if (!controlProducto.eliminar(Id_Producto)) {
                JOptionPane.showMessageDialog(null, "¡PRODUCTO ELIMINADO!");
                this.CargarTablaProductos();
                this.CargarComboCategorias();
                this.CargarComboMarca();
                this.Limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "¡ERROR AL ELIMINAR EL PRODUCTO!");
            }

        }
    }//GEN-LAST:event_jButton_EliminarActionPerformed

    private void jComboBox_categoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_categoriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_categoriaActionPerformed

    private void txt_nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_nombreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Actualizar;
    private javax.swing.JButton jButton_Eliminar;
    private javax.swing.JComboBox<String> jComboBox_Marca;
    private javax.swing.JComboBox<String> jComboBox_categoria;
    private javax.swing.JComboBox<String> jComboBox_iva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel_walpaper;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public static javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable_Producto;
    private javax.swing.JTextField txt_Descripcion;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_nombre;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    /* METODO PARA LIMPIAR CAMPOS */
    private void Limpiar() {
        txt_nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_Descripcion.setText("");
        jComboBox_iva.setSelectedItem("--SELECCIONE IVA");
        jComboBox_categoria.setSelectedItem("--SELECCIONE CATEGORÍA");
        jComboBox_Marca.setSelectedItem("--SELECCIONE MARCA");
    }

    /*  
    ** Método para cargar las marcas en el Jcombobox **
     */
    private void CargarComboMarca() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_Proveedor";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_Marca.removeAllItems();
            jComboBox_Marca.addItem("--SELECCIONE MARCA");
            while (rs.next()) {
                jComboBox_Marca.addItem(rs.getString("empresa"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar las marcas: " + e);
        }

    }

    /*
    
    ** Método para cargar las categorías en el Jcombobox **
     */
    private void CargarComboCategorias() {
        Connection cn = Conexion.conectar();
        String sql = "select * from tb_Categoria";
        Statement st;
        try {

            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            jComboBox_categoria.removeAllItems();
            jComboBox_categoria.addItem("--SELECCIONE CATEGORÍA");
            while (rs.next()) {
                jComboBox_categoria.addItem(rs.getString("descripcion"));
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al cargar las categorias: " + e);
        }

    }

    /*
    
    ** Método para mostrar los productos registrados **
     */
    String descripcionCategoria = "";
    String marcaProveedor = "";
    double precio = 0.0;
    int porcentajeIva = 0;
    double IVA = 0;

    private void CargarTablaProductos() {
        Connection con = Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel();
        String sql = "select p.Id_Producto, p.nombre, pr.empresa, p.cantidad, p.precio, p.descripcion, p.porcentajeIva, c.descripcion, p.estado from tb_Producto as p, tb_Categoria as c, tb_Proveedor as pr where (p.Id_Categoria = c.Id_Categoria) and (p.Id_Proveedor = pr.Id_Proveedor) order by p.Id_Producto";
        Statement st;

        try {

            st = con.createStatement();
            ResultSet rs = st.executeQuery(sql);
            InterGestionarProducto.jTable_Producto = new JTable(model);
            InterGestionarProducto.jScrollPane1.setViewportView(InterGestionarProducto.jTable_Producto);

            model.addColumn("N°"); //Id_Producto
            model.addColumn("Nombre"); // Nombre_Producto
            model.addColumn("Marca"); // empresa --> Id_Proveedor
            model.addColumn("Cantidad"); // cantidad
            model.addColumn("Precio"); // precio
            model.addColumn("Descripción"); // descripcion
            model.addColumn("IVA"); // porcentajeIva
            model.addColumn("Categoría"); // descripcionCategoria
            model.addColumn("Estado"); // estado

            while (rs.next()) {

                precio = rs.getDouble("precio");
                porcentajeIva = rs.getInt("porcentajeIva");

                Object fila[] = new Object[9];

                for (int i = 0; i < 9; i++) {

                    if (i == 6) {
                        this.calcularIVA(precio, porcentajeIva); //metodo
                        fila[i] = IVA;
                        rs.getObject(i + 1);
                    } else {
                        fila[i] = rs.getObject(i + 1);
                    }
                }

                model.addRow(fila);
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error en el llenado de la tabla Producto: " + e);
        }
        //evento para obtener campo al cual el usuario da click
        //y obtener la interfaz que mostrara la informacion general
        jTable_Producto.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTable_Producto.rowAtPoint(e.getPoint());
                int columna_point = 0;

                if (fila_point > -1) {
                    Id_Producto = (int) model.getValueAt(fila_point, columna_point);
                    EnviarDatosProductoSeleccionado(Id_Producto);
                }
            }

        });
    }

    /* Metodo para calcular IVA */
    private double calcularIVA(double precio, int iva) {

        int porcIva = iva;
        switch (porcIva) {
            case 0:
                IVA = 0.0;
                break;
            case 8:
                IVA = precio * 0.08;
                break;
            case 16:
                IVA = precio * 0.16;
                break;
            default:
                break;
        }

        //redondear decimales
        IVA = (double) Math.round(IVA * 100) / 100;
        return IVA;
    }

    /* Metodo que envia datos seleccionados */
    private void EnviarDatosProductoSeleccionado(int Id_producto) {
        try {
            Connection con = Conexion.conectar();
            PreparedStatement pst = con.prepareStatement(
                    "select * from tb_Producto where Id_Producto = '" + Id_producto + "'");
            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                txt_nombre.setText(rs.getString("nombre"));
                txt_cantidad.setText(rs.getString("cantidad"));
                txt_precio.setText(rs.getString("precio"));
                txt_Descripcion.setText(rs.getString("descripcion"));
                int iva = rs.getInt("porcentajeIva");
                switch (iva) {
                    case 0:
                        jComboBox_iva.setSelectedItem("SIN IVA");
                        break;
                    case 8:
                        jComboBox_iva.setSelectedItem("8%");
                        break;
                    case 16:
                        jComboBox_iva.setSelectedItem("16%");
                        break;
                    default:
                        jComboBox_iva.setSelectedItem("--SELECCIONE IVA");
                        break;
                }
                int idProv = rs.getInt("Id_Proveedor");
                jComboBox_Marca.setSelectedItem(relacionarProveedor(idProv));

                int idCateg = rs.getInt("Id_Categoria");
                jComboBox_categoria.setSelectedItem(relacionarCategoria(idCateg));
            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al seleccionar producto: " + e);
        }
    }

    /* Metodo para relacionar categorias */
    private String relacionarCategoria(int idCategoria) {

        String sql = "select descripcion from tb_Categoria where Id_Categoria = '" + idCategoria + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                descripcionCategoria = rs.getString("descripcion");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id de la categoria: " + e);
        }
        return descripcionCategoria;
    }

    /* Metodo para relacionar marcas */
    private String relacionarProveedor(int idProveedor) {

        String sql = "select empresa from tb_Proveedor where Id_Proveedor = '" + idProveedor + "'";
        Statement st;
        try {
            Connection cn = Conexion.conectar();
            st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                marcaProveedor = rs.getString("empresa");
            }
            cn.close();
        } catch (SQLException e) {
            System.out.println("Error al obtener el id del Proveedor: " + e);
        }
        return marcaProveedor;
    }

/* METODO PARA OBTENER ID_CATEGORIA */
    private int IdCategoria(){
        String sql = "select * from tb_Categoria where descripcion = '" + this.jComboBox_categoria.getSelectedItem() + "'";
        Statement st;
        
        try{
           
           Connection cn = Conexion.conectar();
           st = cn.createStatement();
           ResultSet rs = st.executeQuery(sql);
           
           while(rs.next()){
               obtenerId_CategoriaCombo = rs.getInt("Id_Categoria");
           }
            
        }catch(SQLException e){
            System.out.println("Error al obtener las categorias: "+e);
        }
     return obtenerId_CategoriaCombo;    
    }

      /* METODO PARA OBTENER ID_PROVEEDOR */
    private int IdProveedor(){
        String sql = "select * from tb_Proveedor where empresa = '" + this.jComboBox_Marca.getSelectedItem() + "'";
        Statement st;
        
        try{
           
           Connection cn = Conexion.conectar();
           st = cn.createStatement();
           ResultSet rs = st.executeQuery(sql);
           
           while(rs.next()){
               obtenerId_ProveedorCombo = rs.getInt("Id_Proveedor");
           }
            
        }catch(SQLException e){
            System.out.println("Error al obtener las marcas de los productos: "+e);
        }
     return obtenerId_ProveedorCombo;    
    }   
}
